package theoldone822.RoughStart;

import java.io.File;
import java.util.Arrays;
import java.util.Random;

import theoldone822.RoughStart.CraftHandelers.*;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item.ToolMaterial;
import net.minecraft.item.ItemArmor.ArmorMaterial;
import net.minecraft.item.crafting.CraftingManager;
import net.minecraft.item.Item;
import net.minecraft.item.ItemArmor;
import net.minecraft.item.ItemAxe;
import net.minecraft.item.ItemPickaxe;
import net.minecraft.item.ItemStack;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.common.util.EnumHelper;
import net.minecraftforge.oredict.OreDictionary;
import net.minecraftforge.oredict.ShapedOreRecipe;
import net.minecraftforge.oredict.ShapelessOreRecipe;
import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.registry.EntityRegistry;
import cpw.mods.fml.common.registry.GameRegistry;
import cpw.mods.fml.common.registry.LanguageRegistry;

@Mod(modid = "RoughStart", name = "Rough Start", version = "0.9b")
public class RoughStart {

	@Instance("RoughStart")
	public static RoughStart instance = new RoughStart();

	public static ArmorMaterial armorWood;

	public static ToolMaterial toolCrude;
	public static ToolMaterial toolFlint;

	public static Item crudeAxe;
	public static Item flintAxe;
	public static Item leatherStrips;
	public static Item rock;
	public static Item kindling;
	public static Item woodChest;
//	public static Block stoneblock;

	public static boolean nerfBlazePowder;
	public static boolean flintFurnace;
	public static boolean hardFurnace;
	public static boolean kindleFurnace;
	public static boolean smoothStoneTools;
	public static boolean rockRecipe;
	public static boolean naturalSticks;
	public static boolean naturalRocks;
	public static boolean noTreePunching;
	public static boolean enableCrudeAxe;
	public static boolean enableFlintAxe;
	public static boolean noWoolDrop;
	public static boolean enableleatherStrips;
	public static boolean barkArmor;
	public static boolean simpleRepairsWood;
	public static boolean simpleRepairsStone;
	public static boolean simpleRepairsRock;
	public static boolean simpleRepairsCrude;
	public static boolean simpleRepairsCobble;
	public static boolean simpleRepairsLeather;
	public static boolean simpleRepairsLeatherStrip;
	public static boolean nerfBrewing;
	public static boolean throwingRock;
	public static boolean stripArmor;
	public static boolean leatherStrip;
	public static boolean stripRepair;
	public static boolean rockTools;
	public static boolean kindlingEn;
	public static boolean flintRepair;
	public static boolean sticksLeaves;
	public static boolean bushSticks;

	public static int coalTorch;
	public static int charTorch;
	public static int blazeTorch;
	public static int moreLeather;
	public static int kindleTorch;
	public static int cobbleBreaking;
	public static int stoneBreaking;
	public static int saplingSticks;
	public static int nerfPlank;
	public static int plankCut;
	public static int plankCraft;
	public static int nerfStick;
	public static int stickCut;
	public static int pigLeather;
	public static int shatteringStone;
	public static int shatteringStoneB;
	public static int shatteringCobble;
	public static int shatteringCobbleB;
	public static int cobbleCrafting;

	@EventHandler
	public void preInit(FMLPreInitializationEvent event) {
		MinecraftForge.EVENT_BUS.register(new EventHandlers());
		ModMetadata metadata = event.getModMetadata();
		metadata.autogenerated = false;

		metadata.authorList = Arrays.asList("theoldone822");
		metadata.description = ".";

		File installDir = event.getModConfigurationDirectory();
		Configuration settings = new Configuration(new File(installDir, "RoughStart.cfg"));

		settings.load();
		nerfPlank = settings.get("Recipes", "Nerf Plank", 2, "only get number planks").getInt();
		plankCut = settings.get("Recipes", "Plank Cutting", 4, "add axe to recipe to get number planks").getInt();
		nerfStick = settings.get("Recipes", "Nerf Stick", 2, "only get number sticks").getInt();
		stickCut = settings.get("Recipes", "Stick Cutting", 4, "add axe to recipe to get number sticks").getInt();
		nerfBlazePowder = settings.get("Recipes", "Nerf Blaze Power", true, "only 1 blaze powder per rod").getBoolean();
		cobbleBreaking = settings.get("Recipes", "cobbleBreaking", 0, "craft cobblestone into number rocks with pickaxe").getInt();
		stoneBreaking = settings.get("Recipes", "stoneBreaking", 0, "craft stone into number rocks with pickaxe").getInt();
		cobbleCrafting = settings.get("Recipes", "cobbleCrafting", 0, "craft rocks into 1 cobblestone. 0 = off, 1 = 4 rocks, 2 = 9 rocks").getInt();
		plankCraft = settings.get("Recipes", "plankCraft", 0, "craft sticks into 1 oak plank. 0 = off, 1 = 4 sticks, 2 = 9 sticks").getInt();
		blazeTorch = settings.get("Recipes", "blazeTorch", 2, "lets you make torches with blaze powder. 0 Disables").getInt();
		coalTorch = settings.get("Recipes", "Coal Torch", 2, "number of torches when using coal. 0 Disables").getInt();
		charTorch = settings.get("Recipes", "Char Torch", 2, "number of torches when using charcoal. 0 Disables").getInt();
		saplingSticks = settings.get("Recipes", "saplingSticks", 1, "craft saplings into number sticks").getInt();
		nerfBrewing = settings.get("Recipes", "Harder Brewing Stand", true, "3 Stone, 2 Blaze Rods, and 2 Iron").getBoolean();
		throwingRock = settings.get("Rebalance", "throwingRock", true, "you can throw rocks").getBoolean();
		kindleTorch = settings.get("Rebalance", "kindleTorch", 0, "lets you make torches with kindling. 0 Disables").getInt();
		flintFurnace = settings.get("Rebalance", "Flint Furnace", false, "Needs Flint in the middle.").getBoolean();
		kindleFurnace = settings.get("Rebalance", "Kindling Furnace", true, "Needs Kindling in the middle.").getBoolean();
		hardFurnace = settings.get("Rebalance", "Hardcore Furnace", false,
				"Needs Flint and Steel in the middle. Get iron from zombie drop or chest.").getBoolean();
		smoothStoneTools = settings.get("Rebalance", "smoothStoneTools", true, "Stone tools made with smooth stone").getBoolean();
		enableCrudeAxe = settings.get("Rebalance", "enableCrudeAxe", true, "axe made from sticks and a rock in 2x2 crafting").getBoolean();
		enableFlintAxe = settings.get("Rebalance", "enableFlintAxe", true, "axe made from sticks and flint in 2x2 crafting").getBoolean();
		rockTools = settings.get("Rebalance", "rockTools", false, "Stone tools made with rocks").getBoolean();
		kindlingEn = settings.get("Rebalance", "kindling", true, "kindling can be made").getBoolean();
		simpleRepairsWood = settings.get("Repairs", "simpleRepairsWood", true, "wood tools can be repaired by crafting with planks").getBoolean();
		simpleRepairsStone = settings.get("Repairs", "simpleRepairsStone", true, "stone tools can be repaired by crafting with smooth stone").getBoolean();
		simpleRepairsCobble = settings.get("Repairs", "simpleRepairsCobble", false, "stone tools can be repaired by crafting with cobblestone").getBoolean();
		simpleRepairsRock = settings.get("Repairs", "simpleRepairsRock", false, "stone tools can be repaired by crafting with rocks").getBoolean();
		simpleRepairsCrude = settings.get("Repairs", "simpleRepairsCrude", true, "Crude tools can be repaired by crafting with rocks").getBoolean();
		simpleRepairsLeather = settings.get("Repairs", "simpleRepairsLeather", false, "Leather armor can be repaired by crafting with leather").getBoolean();
		simpleRepairsLeatherStrip = settings.get("Repairs", "simpleRepairsLeatherStrip", true, "Leather armor can be repaired by crafting with leather strips").getBoolean();
		flintRepair = settings.get("Repairs", "flintRepair", true, "Flint Axe can be repaired by crafting with flint").getBoolean();
		noWoolDrop = settings.get("Other", "noWoolDrop", true, "sheep don't drop wool if killed").getBoolean();
		pigLeather = settings.get("Other", "pigLeather", 0, "chance for pigs drop 1 leather").getInt();
		stripArmor = settings.get("Other", "stripArmor", true, "leather armor is made from leather strips").getBoolean();
		leatherStrip = settings.get("Other", "leatherStrip", true, "Leather can be crafted into 3 leather strips").getBoolean();
		stripRepair = settings.get("Other", "stripRepair", true, "3 leather strips can be crafted into Leather").getBoolean();
		moreLeather = settings.get("Other", "moreLeather", 100, "Chance out of 100 for 1 extra leather from cows.").getInt();
		naturalSticks = settings.get("World Gen", "naturalSticks", true, "find sticks in grass").getBoolean();
		sticksLeaves = settings.get("World Gen", "TreeBranches", true, "find sticks in leaves").getBoolean();
		bushSticks = settings.get("World Gen", "bushSticks", true, "get sticks from dead bushes with hand").getBoolean();
		naturalRocks = settings.get("World Gen", "naturalRocks", true, "find rocks in grass").getBoolean();
		shatteringStone = settings.get("World Gen", "shatteringStonemin", 0, "Stone breaks into rocks not cobblestone Min amount 0 disable").getInt();
		shatteringStoneB = settings.get("World Gen", "shatteringStonemax", 4, "Max rocks from Stone").getInt();
		shatteringCobble = settings.get("World Gen", "shatteringCobblemin", 0, "Cobblestone breaks into rocks when Mined Min amount 0 disable").getInt();
		shatteringCobbleB = settings.get("World Gen", "shatteringCobblemax", 4, "Max rocks from Cobblestone").getInt();
		noTreePunching = settings.get("World Gen", "noTreePunching", true, "must use axe to get logs and will be slower").getBoolean();
		barkArmor = settings.get("Rebalance", "barkArmor", true).getBoolean();

		settings.save();

		armorWood = EnumHelper.addArmorMaterial("WOOD", 7, new int[] { 1, 4, 1, 1 }, 8);

		toolCrude = EnumHelper.addToolMaterial("Crude", 0, 32, 1.5F, -1.0F, 15);

		toolFlint = EnumHelper.addToolMaterial("Flint", 0, 122, 3.5F, 0.5F, 5);

		FMLCommonHandler.instance().bus().register(new CraftHandeler());
	}

	@EventHandler
	public void InitiateRoughStart(FMLInitializationEvent initEvent) {
		instance = this;

		Blocks.log.setHarvestLevel("axe", 0);
		Blocks.log2.setHarvestLevel("axe", 0);

		Blocks.log.setHardness(2.25f);
		Blocks.log2.setHardness(2.25f);

		crudeAxe = new BasicAxe(toolCrude).setUnlocalizedName("crudeAxe").setTextureName("roughstart:crudeAxe");
		flintAxe = new BasicAxe(toolFlint).setUnlocalizedName("flintAxe").setTextureName("roughstart:flintAxe");
		woodChest = new ItemArmor(armorWood, 0, 1).setUnlocalizedName("roughstart:woodChestplate").setTextureName("RoughStart:WoodChestplate");
		
		GameRegistry.registerItem(woodChest, "WoodChestplate");

		LanguageRegistry.addName(woodChest, "Wood Hauberk");

		leatherStrips = new BasicItem().setUnlocalizedName("leatherStrips").setTextureName("roughstart:leatherStrips");
		rock = new BasicItem().setUnlocalizedName("rock").setTextureName("roughstart:rock");
		kindling = new BasicItem().setUnlocalizedName("kindling").setTextureName("roughstart:kindling");
//		stoneblock = new BasicBlock(Material.ground).setBlockName("stoneblock").setBlockTextureName("roughstart:stoneblock");

		if (enableCrudeAxe)
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(crudeAxe), true, new Object[] { "XY", " Y", Character.valueOf('X'), new ItemStack(rock),
							Character.valueOf('Y'), "stickWood" }));
		if (enableFlintAxe) {
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(flintAxe), true, new Object[] { "XY", " Y", Character.valueOf('X'),
							new ItemStack(Items.flint), Character.valueOf('Y'), "stickWood" }));
			GameRegistry.addRecipe(new EasyRepairFlintTools());
		}
		EntityRegistry.registerModEntity(EntityStone.class, "Thrown Stone", 0, instance, 64, 10, true);
	}

	@EventHandler
	public void postInit(FMLPostInitializationEvent event) {
		if (flintFurnace || hardFurnace || kindleFurnace)
			RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.furnace));

		if (barkArmor)
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(woodChest, true, new Object[] { "X X", "XXX", "XXX", Character.valueOf('X'), "logWood"}));

		if (flintFurnace)
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(Blocks.furnace, true, new Object[] { "XXX", "XYX", "XXX", Character.valueOf('X'), Blocks.cobblestone,
							Character.valueOf('Y'), Items.flint }));

		if (hardFurnace)
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(Blocks.furnace, true, new Object[] { "XXX", "XYX", "XXX", Character.valueOf('X'), Blocks.cobblestone,
							Character.valueOf('Y'), Items.flint_and_steel }));

		if (kindleFurnace)
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(Blocks.furnace, true, new Object[] { "XXX", "XYX", "XXX", Character.valueOf('X'), Blocks.cobblestone,
							Character.valueOf('Y'), kindling }));

		if (nerfPlank != 4) {
			RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 0));
			RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 1));
			RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 2));
			RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 3));
			RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 4));
			RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 5));
			if (nerfPlank > 0) {
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Blocks.planks, nerfPlank), true, new Object[] { "X", Character.valueOf('X'),
							new ItemStack(Blocks.log, 1, 0) }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Blocks.planks, nerfPlank, 1), true, new Object[] { "X", Character.valueOf('X'),
							new ItemStack(Blocks.log, 1, 1) }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Blocks.planks, nerfPlank, 2), true, new Object[] { "X", Character.valueOf('X'),
							new ItemStack(Blocks.log, 1, 2) }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Blocks.planks, nerfPlank, 3), true, new Object[] { "X", Character.valueOf('X'),
							new ItemStack(Blocks.log, 1, 3) }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Blocks.planks, nerfPlank, 4), true, new Object[] { "X", Character.valueOf('X'),
							new ItemStack(Blocks.log2, 1) }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Blocks.planks, nerfPlank, 5), true, new Object[] { "X", Character.valueOf('X'),
							new ItemStack(Blocks.log2, 1, 1) }));
			}		}

		if (coalTorch != 4 || charTorch != 0){
			RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.torch, 4));
			if (coalTorch > 0)
				CraftingManager.getInstance().getRecipeList().add(
						new ShapedOreRecipe(new ItemStack(Blocks.torch, coalTorch), true, new Object[] { "X", "Y", Character.valueOf('X'),
								new ItemStack(Items.coal, 1, 0), Character.valueOf('Y'), "stickWood" }));

			if (charTorch > 0)
				CraftingManager.getInstance().getRecipeList().add(
						new ShapedOreRecipe(new ItemStack(Blocks.torch, charTorch), true, new Object[] { "X", "Y", Character.valueOf('X'),
								new ItemStack(Items.coal, 1, 1), Character.valueOf('Y'), "stickWood" }));
		}
		
		if (blazeTorch > 0) {
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Blocks.torch, blazeTorch), true, new Object[] { "X", "Y", Character.valueOf('X'),
							Items.blaze_powder, Character.valueOf('Y'), "stickWood" }));
		}

		if (kindleTorch > 0) {
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Blocks.torch, kindleTorch), true, new Object[] { "X", "Y", Character.valueOf('X'),
							kindling, Character.valueOf('Y'), "stickWood" }));
		}

		if (nerfBlazePowder) {
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.blaze_powder, 2));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(Items.blaze_powder, true, new Object[] { "X", Character.valueOf('X'), Items.blaze_rod }));
		}

		if (nerfStick != 4) {
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.stick, 4));
			if (nerfStick > 0) {
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stick, nerfStick), true, new Object[] { "X", "X", Character.valueOf('X'), "plankWood" }));
			}		}

		if (nerfBrewing) {
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.brewing_stand));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.brewing_stand), true, new Object[] { "YXY", " X ", "ZZZ", Character.valueOf('X'),
							Items.blaze_rod, Character.valueOf('Y'), Items.iron_ingot, Character.valueOf('Z'), Blocks.stone }));
		}

		if (smoothStoneTools) {
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_axe));
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_hoe));
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_pickaxe));
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_sword));
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_shovel));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stone_axe), true, new Object[] { "YY ", "YX ", " X ", Character.valueOf('X'),
							"stickWood", Character.valueOf('Y'), Blocks.stone }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stone_pickaxe), true, new Object[] { "YYY", " X ", " X ", Character.valueOf('X'),
							"stickWood", Character.valueOf('Y'), Blocks.stone }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stone_hoe), true, new Object[] { "YY ", " X ", " X ", Character.valueOf('X'),
							"stickWood", Character.valueOf('Y'), Blocks.stone }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stone_shovel), true, new Object[] { " Y ", " X ", " X ", Character.valueOf('X'),
							"stickWood", Character.valueOf('Y'), Blocks.stone }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stone_sword), true, new Object[] { " Y ", " Y ", " X ", Character.valueOf('X'),
							"stickWood", Character.valueOf('Y'), Blocks.stone }));
		}

		if (rockTools) {
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_axe));
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_hoe));
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_pickaxe));
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_sword));
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_shovel));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stone_axe), true, new Object[] { "YY ", "YX ", " X ", Character.valueOf('X'),
							"stickWood", Character.valueOf('Y'), rock }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stone_pickaxe), true, new Object[] { "YYY", " X ", " X ", Character.valueOf('X'),
							"stickWood", Character.valueOf('Y'), rock }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stone_hoe), true, new Object[] { "YY ", " X ", " X ", Character.valueOf('X'),
							"stickWood", Character.valueOf('Y'), rock }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stone_shovel), true, new Object[] { " Y ", " X ", " X ", Character.valueOf('X'),
							"stickWood", Character.valueOf('Y'), rock }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stone_sword), true, new Object[] { " Y ", " Y ", " X ", Character.valueOf('X'),
							"stickWood", Character.valueOf('Y'), rock }));
		}

		if (simpleRepairsRock) {
			GameRegistry.addRecipe(new EasyRepairStoneToolsRock());
		}

		if (simpleRepairsCrude) {
			GameRegistry.addRecipe(new EasyRepairCrudeTools());
		}

		if (simpleRepairsCobble) {
			GameRegistry.addRecipe(new EasyRepairCobbleTools());
		}

		if (simpleRepairsStone) {
			GameRegistry.addRecipe(new RepairStoneTools());
		}

		if (simpleRepairsWood) {
			GameRegistry.addRecipe(new EasyRepairWoodTools());
		}

		if (simpleRepairsLeather) {
			GameRegistry.addRecipe(new EasyRepairLeather());
		}

		if (naturalRocks) {
//			MinecraftForge.addGrassSeed(new ItemStack(rock, 1, 0), 1);
		}

		if (naturalSticks) {
//			MinecraftForge.addGrassSeed(new ItemStack(Items.stick, 1, 0), 2);
		}

		if (saplingSticks > 0) {
			CraftingManager.getInstance().getRecipeList().add(
					new ShapelessOreRecipe(new ItemStack(Items.stick, saplingSticks), new Object[] { "treeSapling" }));
		}

		if (cobbleCrafting == 1)
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Blocks.cobblestone), true, new Object[] { "XX", "XX", Character.valueOf('X'), rock }));

		if (cobbleCrafting == 2)
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Blocks.cobblestone), true, new Object[] { "XXX", "XXX", "XXX", Character.valueOf('X'), rock }));

		for (int i = 0; i < 32000; i++) {
			if (Item.getItemById(i) != null) {
				if (Item.getItemById(i) instanceof ItemAxe) {
					OreDictionary.registerOre("toolAxe", new ItemStack(Item.getItemById(i), 1, OreDictionary.WILDCARD_VALUE));
				}
				if (Item.getItemById(i) instanceof ItemPickaxe) {
					OreDictionary.registerOre("toolPickaxe", new ItemStack(Item.getItemById(i), 1, OreDictionary.WILDCARD_VALUE));
				}
			}
		}

		if (stripArmor) {
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.leather_boots));
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.leather_chestplate));
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.leather_helmet));
			RecipeRemover.removeAnyRecipe(new ItemStack(Items.leather_leggings));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.leather_boots),
							new Object[] { "X X", "X X", Character.valueOf('X'), leatherStrips }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.leather_chestplate), new Object[] { "X X", "XXX", "XXX", Character.valueOf('X'),
							leatherStrips }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.leather_helmet),
							new Object[] { "XXX", "X X", Character.valueOf('X'), leatherStrips }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.leather_leggings), new Object[] { "XXX", "X X", "X X", Character.valueOf('X'),
							leatherStrips }));
		}

		if (simpleRepairsLeatherStrip) {
			GameRegistry.addRecipe(new EasyRepairLeatherStrip());
		}

		if (flintRepair) {
			GameRegistry.addRecipe(new EasyRepairFlintTools());
		}

		if (leatherStrip) {
			CraftingManager.getInstance().getRecipeList().add(
					new ShapelessOreRecipe(new ItemStack(leatherStrips, 3, 0), new Object[] { Items.leather }));
		}

		if (stripRepair) {
			CraftingManager.getInstance().getRecipeList().add(
					new ShapelessOreRecipe(new ItemStack(Items.leather, 1, 0), new Object[] { leatherStrips, leatherStrips, leatherStrips }));
		}

		if (kindlingEn) {
			if (!naturalRocks && cobbleBreaking < 1 && stoneBreaking < 1 && shatteringStone < 1 && shatteringCobble < 1) {
				CraftingManager.getInstance().getRecipeList().add(
						new ShapelessOreRecipe(new ItemStack(kindling, 1, 0), new Object[] { Blocks.cobblestone, "stickWood", "stickWood",
								"stickWood", "stickWood", "stickWood", Items.flint }));
			} else {
				CraftingManager.getInstance().getRecipeList().add(
						new ShapelessOreRecipe(new ItemStack(kindling, 1, 0), new Object[] { rock, "stickWood", "stickWood", "stickWood",
								"stickWood", "stickWood", Items.flint }));
			}
		}

		if (stoneBreaking > 0)
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(rock, stoneBreaking), new Object[] {"X", "Y", Character.valueOf('Y'), Blocks.stone, Character.valueOf('X'), "toolPickaxe" }));

		if (cobbleBreaking > 0)
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(rock, cobbleBreaking), new Object[] {"X", "Y", Character.valueOf('Y'), Blocks.cobblestone, Character.valueOf('X'), "toolPickaxe" }));

		if (stickCut > 0){
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stick, stickCut), true, new Object[] { "YX", " X", Character.valueOf('X'), "plankWood",
							Character.valueOf('Y'), "toolAxe" }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapedOreRecipe(new ItemStack(Items.stick, stickCut), true, new Object[] { " X", "YX", Character.valueOf('X'), "plankWood",
							Character.valueOf('Y'), "toolAxe" }));
		}

		if (plankCraft == 2)
			// Random Plank output code
//			Random rand = new Random();
//			CraftingManager.getInstance().getRecipeList().add(
//					new ShapedOreRecipe(new ItemStack(OreDictionary.getOres("plankWood").get(rand.nextInt((OreDictionary.getOres("plankWood").size() - 1) + 1)).getItem(), 1, rand.nextInt(16)), new Object[] { "XXX", "XXX", "XXX", Character.valueOf('X'), "stickWood" }));
			CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Blocks.log), new Object[] { "XXX", "XXX", "XXX", Character.valueOf('X'), "stickWood" }));
		if (plankCraft == 1)
			// Random Plank output code
//			Random rand = new Random();
//			CraftingManager.getInstance().getRecipeList().add(
//					new ShapedOreRecipe(new ItemStack(OreDictionary.getOres("plankWood").get(rand.nextInt((OreDictionary.getOres("plankWood").size() - 1) + 1)).getItem(), 1, rand.nextInt(16)), new Object[] { "XX", "XX", Character.valueOf('X'), "stickWood" }));
			CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Blocks.log), new Object[] { "XX", "XX", Character.valueOf('X'), "stickWood" }));

		if (plankCut > 0) {
			CraftingManager.getInstance().getRecipeList().add(
					new ShapelessOreRecipe(new ItemStack(Blocks.planks, plankCut, 0), new Object[] { new ItemStack(Blocks.log, 1, 0), "toolAxe" }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapelessOreRecipe(new ItemStack(Blocks.planks, plankCut, 1), new Object[] { new ItemStack(Blocks.log, 1, 1), "toolAxe" }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapelessOreRecipe(new ItemStack(Blocks.planks, plankCut, 2), new Object[] { new ItemStack(Blocks.log, 1, 2), "toolAxe" }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapelessOreRecipe(new ItemStack(Blocks.planks, plankCut, 3), new Object[] { new ItemStack(Blocks.log, 1, 3), "toolAxe" }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapelessOreRecipe(new ItemStack(Blocks.planks, plankCut, 4), new Object[] { new ItemStack(Blocks.log2, 1, 0), "toolAxe" }));
			CraftingManager.getInstance().getRecipeList().add(
					new ShapelessOreRecipe(new ItemStack(Blocks.planks, plankCut, 5), new Object[] { new ItemStack(Blocks.log2, 1, 1), "toolAxe" }));
		}
	}
}
