package theoldone822.RoughStart;

import java.io.File;
import java.util.Arrays;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.init.Blocks;
import net.minecraft.init.Items;
import net.minecraft.item.Item.ToolMaterial;
import net.minecraft.item.crafting.CraftingManager;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.common.util.EnumHelper;
import net.minecraftforge.oredict.OreDictionary;
import net.minecraftforge.oredict.ShapedOreRecipe;
import net.minecraftforge.oredict.ShapelessOreRecipe;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.Mod.EventHandler;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;

@Mod(modid = "RoughStart", name = "Rough Start", version = "0.9b")
public class RoughStart {
	
	@Instance("RoughStart")
	public static RoughStart instance = new RoughStart();
	
	public static ToolMaterial toolCrude;
	public static ToolMaterial toolFlint;
	
	public static Item crudeAxe;
	public static Item flintAxe;
	public static Item leatherStrips;
	public static Item stone;
	public static Block stoneblock;
	
	public static boolean nerfPlank;
	public static boolean nerfStick;
	public static boolean nerfTorch;
	public static boolean nerfBlazePowder;
	public static boolean flintFurnace;
	public static boolean smoothStoneTools;
	public static boolean blazeTorch;
	public static boolean rockRecipe;
	public static boolean naturalSticks;
	public static boolean naturalRocks;
	public static boolean noTreePunching;
	public static boolean enableCrudeAxe;
	public static boolean enableFlintAxe;
	public static boolean noWoolDrop;
	public static boolean enableleatherStrips;
	public static boolean moreLeather;
	public static boolean barkArmor;
	public static boolean simpleRepairsWood;
	public static boolean simpleRepairsStone;
	public static boolean simpleRepairsLeather;
	
	@EventHandler
	public void preInit(FMLPreInitializationEvent event) {
		MinecraftForge.EVENT_BUS.register(new EventHandlers());
		ModMetadata metadata = event.getModMetadata();
		metadata.autogenerated = false;
		
		metadata.authorList = Arrays.asList("theoldone822");
		metadata.description = ".";
		
		File installDir = event.getModConfigurationDirectory();
		Configuration settings = new Configuration(new File(installDir, "RoughStart.cfg"));
		
		settings.load();
		nerfPlank = settings.get("Nerfs", "Nerf Plank", true).getBoolean();
		nerfStick = settings.get("Nerfs", "Nerf Stick", true).getBoolean();
		nerfTorch = settings.get("Nerfs", "Nerf Torch", true).getBoolean();
		nerfBlazePowder = settings.get("Nerfs", "Nerf Blaze Power", true).getBoolean();
		flintFurnace = settings.get("Nerfs", "Flint Furnace", true).getBoolean();
		smoothStoneTools = settings.get("Nerfs", "smoothStoneTools", true).getBoolean();
		blazeTorch = settings.get("Extras", "blazeTorch", true).getBoolean();
		rockRecipe = settings.get("Extras", "rockRecipe", true).getBoolean();
		naturalSticks = settings.get("Extras", "naturalSticks", true).getBoolean();
		naturalRocks = settings.get("Extras", "naturalRocks", true).getBoolean();
		noTreePunching = settings.get("Nerfs", "noTreePunching", true).getBoolean();
		enableCrudeAxe = settings.get("Extras", "enableCrudeAxe", true).getBoolean();
		enableFlintAxe = settings.get("Extras", "enableFlintAxe", true).getBoolean();
		noWoolDrop = settings.get("Nerfs", "noWoolDrop", true).getBoolean();
//		enableleatherStrips = settings.get("Nerfs", "enableleatherStrips", true).getBoolean();
		moreLeather = settings.get("Extras", "moreLeather", true).getBoolean();
//		barkArmor = settings.get("Nerfs", "barkArmor", true).getBoolean();
		simpleRepairsWood = settings.get("Extras", "simpleRepairsWood", true).getBoolean();
		simpleRepairsStone = settings.get("Extras", "simpleRepairsStone", true).getBoolean();
		simpleRepairsLeather = settings.get("Extras", "simpleRepairsLeather", true).getBoolean();

		settings.save();
		
		
		toolCrude = EnumHelper.addToolMaterial("Crude", 0, 32, 1.5F, -1.0F, 15);
		
		toolFlint = EnumHelper.addToolMaterial("Flint", 0, 122, 3.5F, 0.5F, 5);
		
	}
	
	@EventHandler
	public void InitiateRoughStart(FMLInitializationEvent initEvent) {
		instance = this;
		
		Blocks.log.setHarvestLevel("axe", 0);
		Blocks.log2.setHarvestLevel("axe", 0);
		
		crudeAxe = new BasicAxe(toolCrude).setUnlocalizedName("crudeAxe").setTextureName("roughstart:crudeAxe");
		flintAxe = new BasicAxe(toolFlint).setUnlocalizedName("flintAxe").setTextureName("roughstart:flintAxe");
		
		leatherStrips = new BasicItem().setUnlocalizedName("leatherStrips").setTextureName("roughstart:leatherStrips");
		stone = new BasicItem().setUnlocalizedName("stone").setTextureName("roughstart:stone");
		stoneblock = new BasicBlock(Material.ground).setBlockName("stoneblock").setBlockTextureName("roughstart:stoneblock");

		if (enableCrudeAxe)
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(crudeAxe), true, new Object[] { "XY", " Y", Character.valueOf('X'), new ItemStack(Items.coal, 2, OreDictionary.WILDCARD_VALUE), Character.valueOf('Y'), "stickWood"}));
		if (enableFlintAxe)
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(flintAxe), true, new Object[] { "XY", " Y", Character.valueOf('X'), new ItemStack(Items.flint), Character.valueOf('Y'), "stickWood"}));
	
	}
	
	@EventHandler
	public void postInit(FMLPostInitializationEvent event) {
        RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.furnace));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(Blocks.furnace, true, new Object[] { "XXX", "XYX", "XXX", Character.valueOf('X'), Blocks.cobblestone, Character.valueOf('Y'), Items.flint }));
		
		if (nerfPlank){
        RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 0));
        RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 1));
        RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 2));
        RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 3));
        RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 4));
        RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.planks, 4, 5));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Blocks.planks, 2), true, new Object[] { "X", Character.valueOf('X'), new ItemStack(Blocks.log, 1, 0)}));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Blocks.planks, 2, 1), true, new Object[] { "X", Character.valueOf('X'), new ItemStack(Blocks.log, 1, 1)}));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Blocks.planks, 2, 2), true, new Object[] { "X", Character.valueOf('X'), new ItemStack(Blocks.log, 1, 2)}));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Blocks.planks, 2, 3), true, new Object[] { "X", Character.valueOf('X'), new ItemStack(Blocks.log, 1, 3)}));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Blocks.planks, 2, 4), true, new Object[] { "X", Character.valueOf('X'), new ItemStack(Blocks.log2, 1)}));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Blocks.planks, 2, 5), true, new Object[] { "X", Character.valueOf('X'), new ItemStack(Blocks.log2, 1, 1)}));
		}
		if (nerfTorch){
        RecipeRemover.removeAnyRecipe(new ItemStack(Blocks.torch, 4));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Blocks.torch, 2), true, new Object[] { "X", "Y", Character.valueOf('X'), new ItemStack(Items.coal, 2, OreDictionary.WILDCARD_VALUE), Character.valueOf('Y'), "stickWood"}));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Blocks.torch, 2), true, new Object[] { "X", "Y", Character.valueOf('X'), new ItemStack(Items.coal, 2, OreDictionary.WILDCARD_VALUE), Character.valueOf('Y'), Items.blaze_powder}));
		}
		if (nerfBlazePowder){
        RecipeRemover.removeAnyRecipe(new ItemStack(Items.blaze_powder, 2));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(Items.blaze_powder, true, new Object[] { "XXX", "XYX", "XXX", Character.valueOf('X'), Blocks.cobblestone, Character.valueOf('Y'), Items.flint }));
		}
		if (nerfStick){
        RecipeRemover.removeAnyRecipe(new ItemStack(Items.stick, 4));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Items.stick, 2), true, new Object[] { "X", "X", Character.valueOf('X'), "plankWood"}));
		}
		if (smoothStoneTools){
        RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_axe));
        RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_hoe));
        RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_pickaxe));
        RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_sword));
        RecipeRemover.removeAnyRecipe(new ItemStack(Items.stone_shovel));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Items.stone_axe), true, new Object[] { "YY ", "YX ", " X ", Character.valueOf('X'), "stickWood", Character.valueOf('Y'), Blocks.stone}));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Items.stone_pickaxe), true, new Object[] { "YYY", " X ", " X ", Character.valueOf('X'), "stickWood", Character.valueOf('Y'), Blocks.stone}));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Items.stone_hoe), true, new Object[] { "YY ", " X ", " X ", Character.valueOf('X'), "stickWood", Character.valueOf('Y'), Blocks.stone}));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Items.stone_shovel), true, new Object[] { " Y ", " X ", " X ", Character.valueOf('X'), "stickWood", Character.valueOf('Y'), Blocks.stone}));
		CraftingManager.getInstance().getRecipeList().add(new ShapedOreRecipe(new ItemStack(Items.stone_sword), true, new Object[] { " Y ", " Y ", " X ", Character.valueOf('X'), "stickWood", Character.valueOf('Y'), Blocks.stone}));
		}
		if (simpleRepairsStone){
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.stone_axe), new Object[] {new ItemStack(Items.stone_axe, 1, OreDictionary.WILDCARD_VALUE), Blocks.stone}));
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.stone_pickaxe), new Object[] {new ItemStack(Items.stone_pickaxe, 1, OreDictionary.WILDCARD_VALUE), Blocks.stone}));
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.stone_hoe), new Object[] {new ItemStack(Items.stone_hoe, 1, OreDictionary.WILDCARD_VALUE), Blocks.stone}));
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.stone_shovel), new Object[] {new ItemStack(Items.stone_shovel, 1, OreDictionary.WILDCARD_VALUE), Blocks.stone}));
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.stone_sword), new Object[] {new ItemStack(Items.stone_sword, 1, OreDictionary.WILDCARD_VALUE), Blocks.stone}));
		}
		if (simpleRepairsWood){
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.wooden_axe), new Object[] {new ItemStack(Items.wooden_axe, 1, OreDictionary.WILDCARD_VALUE), "plankWood"}));
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.wooden_pickaxe), new Object[] {new ItemStack(Items.wooden_pickaxe, 1, OreDictionary.WILDCARD_VALUE), "plankWood"}));
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.wooden_hoe), new Object[] {new ItemStack(Items.wooden_hoe, 1, OreDictionary.WILDCARD_VALUE), "plankWood"}));
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.wooden_shovel), new Object[] {new ItemStack(Items.wooden_shovel, 1, OreDictionary.WILDCARD_VALUE), "plankWood"}));
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.wooden_sword), new Object[] {new ItemStack(Items.wooden_sword, 1, OreDictionary.WILDCARD_VALUE), "plankWood"}));
		}
		if (simpleRepairsLeather){
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.leather_boots), new Object[] {new ItemStack(Items.leather_boots, 1, OreDictionary.WILDCARD_VALUE), Items.leather}));
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.leather_chestplate), new Object[] {new ItemStack(Items.leather_chestplate, 1, OreDictionary.WILDCARD_VALUE), Items.leather}));
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.leather_helmet), new Object[] {new ItemStack(Items.leather_helmet, 1, OreDictionary.WILDCARD_VALUE), Items.leather}));
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.leather_leggings), new Object[] {new ItemStack(Items.leather_leggings, 1, OreDictionary.WILDCARD_VALUE), Items.leather}));
		}
		if (naturalRocks){
			CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(stone), new Object[] {Blocks.cobblestone}));
		}
		
		if (naturalSticks){
        MinecraftForge.addGrassSeed(new ItemStack(Items.stick, 1, 0), 2);
		CraftingManager.getInstance().getRecipeList().add(new ShapelessOreRecipe(new ItemStack(Items.stick), new Object[] {"treeSapling"}));
		}
	}
}
